repositories {
    maven { url "https://jitpack.io" }
}

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-parcelize"
apply plugin: "kotlin-kapt"

android {
    namespace "mobi.lab.components.demo"

    buildFeatures {
        viewBinding = true
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        compileSdkVersion libs.versions.android.sdk.compile.get()
        targetSdkVersion libs.versions.android.sdk.target.get()
        minSdkVersion libs.versions.android.sdk.min.get()
        applicationId "mobi.lab.components.demo"

        versionCode 1
        versionName "0.0.1"

        println "CONF: versionName is set to: " + versionName
        println "CONF: versionCode is set to: " + versionCode
    }

    signingConfigs {
        releaseSigning {
            storeFile file("signing/signing.keystore")
            storePassword "JthvvZuFHcubhcfdNEwlaozMsBwgStijeJuaUIKsBwrNNCHQdn"
            keyAlias "ComponentsDemo"
            keyPassword "XZdAtrAzsIvTLgqPjpfzxpqEnOENBRRpMZOWgsUXyCXSHolTJo"
        }
        debugSigning {
            storeFile file("signing/debug.keystore")
            storePassword "PzIzJAqvONJmhryYnzDgDfFAXMotnJZQhuPCgbFteBYAmNLbwY"
            keyAlias "ComponentsDemo"
            keyPassword "ouHhtZOSoyLaMOKYPJmZsGdZSOAisscmDNFhMpOkpBUpTzzgbe"
        }
    }
    
    buildTypes {
        release {
            // Proguard is enabled by default
            // (Think about the logging lib before turning this off)
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.releaseSigning
        }

        debug {
            signingConfig signingConfigs.debugSigning
        }
    }

    testOptions {
        animationsDisabled = true

        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                // Always show output even if the result has not changed
                outputs.upToDateWhen { false }
                // Show standard stream outputs if used
                showStandardStreams = true
            }
        }
    }

    lintOptions {
        // Workaround for a bug in Kotlin extension's Parcelize
        warning "ParcelCreator"

        // In general we want to check for problems. Any time, all the time.
        checkReleaseBuilds true
        // And fail the build if we have errors
        abortOnError true

        // Level depends on the type of the job
        /// Fail the build if buildNevercodeRelease target is called and we have missing translations!
        warning("MissingTranslation")
        // Error level things
        /// Hardcoded text should not exist or should have case by case exceptions
        error "HardcodedText"
        // Warning level things
        warning "ImpliedQuantity"
        // Retrofit uses Okio and that generates this warning
        warning "InvalidPackage"
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            output.outputFileName = "${rootProject.name}-${variant.name}-${variant.versionName}.apk"
        }
    }
}

dependencies {
    libsHelper.addUnitTestDependencies(it)
    libsHelper.addInstrumentationTestDependencies(it)

    implementation project(":lib")

    implementation libs.kotlin
    implementation libs.androidx.navigation.fragment
    implementation libs.androidx.navigation.ui

    // Util
    implementation libs.timber

    // UI
    implementation libs.androidx.appcompat
    implementation libs.constraintlayout
    implementation libs.material
}

def GROUP_CI_BUILD_TASKS = "Build"

task buildAllDebug(dependsOn: ["build", ":lib:buildLibDebug"])
buildAllDebug.group = GROUP_CI_BUILD_TASKS
buildAllDebug.description = "Build the debug version"

task buildAllRelease(dependsOn: ["build", ":lib:buildLibRelease"])
buildAllRelease.group = GROUP_CI_BUILD_TASKS
buildAllRelease.description = "Build the release version"
