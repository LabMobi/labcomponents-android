apply plugin: "com.android.library"
apply plugin: "kotlin-android"

def srcDirs = [
        'mobi/lab/components/button',
        'mobi/lab/components/color',
        'mobi/lab/components/shape',
        'mobi/lab/components/shared',
        'mobi/lab/components/textfield',
        'mobi/lab/components/theme',
        'mobi/lab/components/typography',
]

project.archivesBaseName = "labcomponents"

android {
    namespace "mobi.lab.components"

    buildFeatures {
        viewBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        compileSdkVersion libs.versions.android.sdk.compile.get()
        targetSdkVersion libs.versions.android.sdk.target.get()
        minSdkVersion libs.versions.android.sdk.min.get()
    }

    // A trick taken from material-components-android to keep everything in a single R namespace
    // and still keep the sources separate for maintainability.
    sourceSets {
        main.java.srcDir 'java'
        main.java.includes = srcDirs.collect { it + '/**/*.kt' }
        main.java.excludes = [
                '**/build/**',
        ]
        srcDirs.forEach {
            main.res.srcDirs += 'java/' + it + '/res'
            main.res.srcDirs += 'java/' + it + '/res-public'
        }
    }

    buildTypes.all {
        consumerProguardFiles 'proguard-rules.pro'
    }

    testOptions.unitTests.all {
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
            // Always show output even if the result has not changed
            outputs.upToDateWhen { false }
            // Show standard stream outputs if used
            showStandardStreams = true
        }
    }

    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${archivesBaseName}-${variant.name}-${rootProject.ext.libraryVersion}.aar"
        }
    }
}

dependencies {
    implementation libs.kotlin
    implementation libs.androidx.appcompat
    implementation libs.material
}


def GROUP_CI_BUILD_TASKS = "Build"

task buildLibDebug(dependsOn: ["build"])
buildLibDebug.group = GROUP_CI_BUILD_TASKS
buildLibDebug.description = "Build the debug version of components lib"

task buildLibRelease(dependsOn: ["buildLibDebug"])
buildLibRelease.group = GROUP_CI_BUILD_TASKS
buildLibRelease.description = "Build the release version of components lib"
