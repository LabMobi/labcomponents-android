plugins {
    // This is a core plugin and versioned together with Gradle
    id 'maven-publish'
    // This is a core plugin and versioned together with Gradle
    id 'signing'
    alias libs.plugins.android.library
    alias libs.plugins.kotlin.android
}

def srcDirs = [
        'mobi/lab/components/button',
        'mobi/lab/components/color',
        'mobi/lab/components/shape',
        'mobi/lab/components/shared',
        'mobi/lab/components/textfield',
        'mobi/lab/components/theme',
        'mobi/lab/components/toolbar',
        'mobi/lab/components/typography',
]

project.archivesBaseName = "labcomponents"

android {
    namespace "mobi.lab.components"

    // A trick taken from material-components-android to keep everything in a single R namespace
    // and still keep the sources separate for maintainability.
    sourceSets {
        main.java.srcDir 'java'
        main.resources.srcDir 'java/resources'
        main.java.excludes = [
                '**/build/**',
        ]
        srcDirs.forEach {
            main.res.srcDirs += 'java/' + it + '/res'
            main.res.srcDirs += 'java/' + it + '/res-public'
        }
    }

    buildFeatures {
        viewBinding = true
        buildConfig = true
    }

    kotlinOptions {
        jvmTarget = libs.versions.jvmTarget.get()

        // For Kotlin API strict mode.
        // In the future we should be able to do it easier.
        // When https://youtrack.jetbrains.com/issue/KT-37652 is fixed
        // then we can use the module annotation to enable this instead of the compiler flag.
        freeCompilerArgs += '-Xexplicit-api=strict'
    }

    compileOptions {
        sourceCompatibility = JavaVersion.valueOf(libs.versions.javaCompatibility.get())
        targetCompatibility = JavaVersion.valueOf(libs.versions.javaCompatibility.get())
    }

    packagingOptions {
        merge '**/LICENSE.txt'
    }

    defaultConfig {
        compileSdk = libs.versions.android.sdk.compile.get().toInteger()
        targetSdkVersion libs.versions.android.sdk.target.get()
        minSdkVersion libs.versions.android.sdk.min.get()
        setVersion "${rootProject.ext.libraryVersion}"
    }

    buildTypes.configureEach {
        consumerProguardFiles 'proguard-rules.pro'
    }

    testOptions.unitTests.all {
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
            // Always show output even if the result has not changed
            outputs.upToDateWhen { false }
            // Show standard stream outputs if used
            showStandardStreams = true
        }
    }

    libraryVariants.configureEach { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.getName().contains("release")) {
                // Don't add the variant name to release artefacts
                outputFileName = "${base.archivesName.get()}-${rootProject.ext.libraryVersion}.aar"
            } else {
                outputFileName = "${base.archivesName.get()}-${variant.name}-${rootProject.ext.libraryVersion}.aar"
            }
        }
    }

    lint {
        fatal "StopShip"
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
        }
    }
}

dependencies {
    implementation libs.kotlin
    implementation libs.material
}


def GROUP_CI_BUILD_TASKS = "Build"

tasks.register('buildLibDebug') {
    group = GROUP_CI_BUILD_TASKS
    description = "Build the debug version of components lib"
    dependsOn "build"
}

tasks.register('buildLibRelease') {
    group = GROUP_CI_BUILD_TASKS
    description = "Build the release version of components lib"
    dependsOn "buildLibDebug"
}

tasks.register('buildAndPublishRelease') {
    group = "Publish"
    description = "Build the library release version and publish it"
    dependsOn "buildLibRelease", 'publish'
}

tasks.named('publish').get().mustRunAfter tasks.named('buildLibRelease').get()

Properties properties = new Properties()
try {
    properties.load(project.rootProject.file('publish.properties').newDataInputStream())
} catch (Exception ignored) {
    println "publish.properties missing"
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId = 'mobi.lab.labcomponents'
                artifactId = 'labcomponents'
                from components.release
                pom {
                    packaging = 'aar'
                    name = 'Mobi Lab Components library.'
                    description = 'The Android implementation of the Mobi Lab design system components.'
                    url = 'https://github.com/LabMobi/labcomponents-android'

                    licenses {
                        license {
                            name = 'The MIT License'
                            url = 'https://opensource.org/licenses/mit-license.php'
                        }
                    }
                    developers {
                        developer {
                            name = properties.getProperty("publish_developer_name")
                            name = properties.getProperty("publish_developer_name")
                            email = properties.getProperty("publish_developer_email")
                            organization = properties.getProperty("publish_developer_organization")
                            organizationUrl = properties.getProperty("publish_developer_organization_url")
                        }
                    }
                    scm {
                        connection = 'https://github.com/LabMobi/labcomponents-android.git'
                        developerConnection = 'https://github.com/LabMobi/labcomponents-android.git'
                        url = 'https://github.com/LabMobi/labcomponents-android'
                    }
                }
            }
        }
        repositories {
            maven {
                name = "OSSRH"
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username = properties.getProperty("publish_ossrh_username")
                    password = properties.getProperty("publish_ossrh_password")
                }
            }
        }
    }

    signing {
        def signingKey = properties.getProperty("signing_key")
        def signingPassword = properties.getProperty("signing_password")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications
    }
}
