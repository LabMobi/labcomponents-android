plugins {
    // This is a core plugin and versioned together with Gradle
    id 'signing'
    alias libs.plugins.android.library
    alias libs.plugins.kotlin.android
    alias libs.plugins.maven.publish.vanniktech
}

def srcDirs = [
        'mobi/lab/components/button',
        'mobi/lab/components/color',
        'mobi/lab/components/shape',
        'mobi/lab/components/shared',
        'mobi/lab/components/textfield',
        'mobi/lab/components/theme',
        'mobi/lab/components/toolbar',
        'mobi/lab/components/typography',
]

project.base.archivesName.set("labcomponents")

android {
    namespace = "mobi.lab.components"

    // A trick taken from material-components-android to keep everything in a single R namespace
    // and still keep the sources separate for maintainability.
    sourceSets {
        main.java.srcDir 'java'
        main.resources.srcDir 'java/resources'
        main.java.excludes = [
                '**/build/**',
        ]
        srcDirs.forEach {
            main.res.srcDirs += 'java/' + it + '/res'
            main.res.srcDirs += 'java/' + it + '/res-public'
        }
    }

    buildFeatures {
        viewBinding = true
        buildConfig = true
    }

    kotlinOptions {
        jvmTarget = libs.versions.jvmTarget.get()

        // For Kotlin API strict mode.
        // In the future we should be able to do it easier.
        // When https://youtrack.jetbrains.com/issue/KT-37652 is fixed
        // then we can use the module annotation to enable this instead of the compiler flag.
        freeCompilerArgs += '-Xexplicit-api=strict'
    }

    compileOptions {
        sourceCompatibility = JavaVersion.valueOf(libs.versions.javaCompatibility.get())
        targetCompatibility = JavaVersion.valueOf(libs.versions.javaCompatibility.get())
    }

    packagingOptions {
        merge '**/LICENSE.txt'
    }

    defaultConfig {
        compileSdk = libs.versions.android.sdk.compile.get().toInteger()
        targetSdkVersion libs.versions.android.sdk.target.get()
        minSdkVersion libs.versions.android.sdk.min.get()
        setVersion "${rootProject.ext.libraryVersion}"
    }

    buildTypes.configureEach {
        consumerProguardFiles 'proguard-rules.pro'
    }

    testOptions.unitTests.all {
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
            // Always show output even if the result has not changed
            outputs.upToDateWhen { false }
            // Show standard stream outputs if used
            showStandardStreams = true
        }
    }

    libraryVariants.configureEach { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.getName().contains("release")) {
                // Don't add the variant name to release artefacts
                outputFileName = "${base.archivesName.get()}-${rootProject.ext.libraryVersion}.aar"
            } else {
                outputFileName = "${base.archivesName.get()}-${variant.name}-${rootProject.ext.libraryVersion}.aar"
            }
        }
    }

    lint {
        fatal "StopShip"
    }
}

dependencies {
    implementation libs.kotlin
    implementation libs.material
}

mavenPublishing {
    // the first parameter represents which variant is published
    // the second whether to publish a sources jar
    // the third whether to publish a javadoc jar
    //configure(new AndroidSingleVariantLibrary("release", true, true))

    // false - manual release required via https://central.sonatype.com/publishing/deployments
    publishToMavenCentral(false)

    signAllPublications()

    coordinates("mobi.lab.labcomponents", "labcomponents", "${rootProject.ext.libraryVersion}")

    pom {
        name = "Mobi Lab Components library."
        description = "The Android implementation of the Mobi Lab design system components."
        inceptionYear = "2023"
        url = "https://github.com/LabMobi/labcomponents-android"
        licenses {
            license {
                name = "The MIT License"
                url = "https://opensource.org/licenses/mit-license.php"
                distribution = "https://opensource.org/licenses/mit-license.php"
            }
        }
        developers {
            developer {
                id = "android@lab.mobi"
                name = "Mobi Lab"
                url = "https://lab.mobi"
            }
        }
        scm {
            connection = 'https://github.com/LabMobi/labcomponents-android.git'
            developerConnection = 'https://github.com/LabMobi/labcomponents-android.git'
            url = 'https://github.com/LabMobi/labcomponents-android'
        }
    }
}


def GROUP_CI_BUILD_TASKS = "Build"

tasks.register('buildLibDebug') {
    group = GROUP_CI_BUILD_TASKS
    description = "Build the debug version of components lib"
    dependsOn "build"
}

tasks.register('buildLibRelease') {
    group = GROUP_CI_BUILD_TASKS
    description = "Build the release version of components lib"
    dependsOn "buildLibDebug"
}

tasks.register('buildAndPublishRelease') {
    group = "Publish"
    description = "Build the library release version and publish it"
    dependsOn "buildLibRelease", "checkCode", "publishToMavenCentral"
}

publishToMavenCentral.mustRunAfter tasks.named('buildLibRelease').get()
publishToMavenCentral.mustRunAfter tasks.checkCode
